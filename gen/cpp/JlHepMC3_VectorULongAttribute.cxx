// this file was auto-generated by wrapit v1.4.0
#include "Wrapper.h"

#include "jlHepMC3.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<HepMC3::VectorULongAttribute> : std::false_type { };
  template<> struct DefaultConstructible<HepMC3::VectorULongAttribute> : std::false_type { };
template<> struct SuperType<HepMC3::VectorULongAttribute> { typedef HepMC3::Attribute type; };
}

// Class generating the wrapper for type HepMC3::VectorULongAttribute
// signature to use in the veto file: HepMC3::VectorULongAttribute
struct JlHepMC3_VectorULongAttribute: public Wrapper {

  JlHepMC3_VectorULongAttribute(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type HepMC3::VectorULongAttribute (" __HERE__ ")");
    // defined in /home/hurtbadly/.julia/artifacts/7594d64d7c28f9689b484bf4d09af6dbb8b5123c/include/HepMC3/Attribute.h:944:7
    jlcxx::TypeWrapper<HepMC3::VectorULongAttribute>  t = jlModule.add_type<HepMC3::VectorULongAttribute>("HepMC3!VectorULongAttribute",
      jlcxx::julia_base_type<HepMC3::Attribute>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<HepMC3::VectorULongAttribute>>(new jlcxx::TypeWrapper<HepMC3::VectorULongAttribute>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void HepMC3::VectorULongAttribute::VectorULongAttribute(std::vector<unsigned long>) (" __HERE__ ")");
    // defined in /home/hurtbadly/.julia/artifacts/7594d64d7c28f9689b484bf4d09af6dbb8b5123c/include/HepMC3/Attribute.h:951:5
    t.constructor<std::vector<unsigned long>>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for bool HepMC3::VectorULongAttribute::from_string(const std::string &) (" __HERE__ ")");
    // signature to use in the veto list: bool HepMC3::VectorULongAttribute::from_string(const std::string &)
    // defined in /home/hurtbadly/.julia/artifacts/7594d64d7c28f9689b484bf4d09af6dbb8b5123c/include/HepMC3/Attribute.h:954:10
    t.method("from_string", static_cast<bool (HepMC3::VectorULongAttribute::*)(const std::string &) >(&HepMC3::VectorULongAttribute::from_string));

    DEBUG_MSG("Adding wrapper for bool HepMC3::VectorULongAttribute::to_string(std::string &) (" __HERE__ ")");
    // signature to use in the veto list: bool HepMC3::VectorULongAttribute::to_string(std::string &)
    // defined in /home/hurtbadly/.julia/artifacts/7594d64d7c28f9689b484bf4d09af6dbb8b5123c/include/HepMC3/Attribute.h:964:10
    t.method("to_string", static_cast<bool (HepMC3::VectorULongAttribute::*)(std::string &)  const>(&HepMC3::VectorULongAttribute::to_string));

    DEBUG_MSG("Adding wrapper for std::vector<unsigned long> HepMC3::VectorULongAttribute::value() (" __HERE__ ")");
    // signature to use in the veto list: std::vector<unsigned long> HepMC3::VectorULongAttribute::value()
    // defined in /home/hurtbadly/.julia/artifacts/7594d64d7c28f9689b484bf4d09af6dbb8b5123c/include/HepMC3/Attribute.h:971:32
    t.method("value", static_cast<std::vector<unsigned long> (HepMC3::VectorULongAttribute::*)()  const>(&HepMC3::VectorULongAttribute::value));

    DEBUG_MSG("Adding wrapper for void HepMC3::VectorULongAttribute::set_value(const std::vector<unsigned long> &) (" __HERE__ ")");
    // signature to use in the veto list: void HepMC3::VectorULongAttribute::set_value(const std::vector<unsigned long> &)
    // defined in /home/hurtbadly/.julia/artifacts/7594d64d7c28f9689b484bf4d09af6dbb8b5123c/include/HepMC3/Attribute.h:976:10
    t.method("set_value", static_cast<void (HepMC3::VectorULongAttribute::*)(const std::vector<unsigned long> &) >(&HepMC3::VectorULongAttribute::set_value));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<HepMC3::VectorULongAttribute>> type_;
};
std::shared_ptr<Wrapper> newJlHepMC3_VectorULongAttribute(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlHepMC3_VectorULongAttribute(module));
}
