// this file was auto-generated by wrapit v1.4.0
#include "Wrapper.h"

#include "jlHepMC3.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"
// Class generating the wrapper for type 
// signature to use in the veto file: 
struct JlGlobal: public Wrapper {

  JlGlobal(jlcxx::Module& jlModule): Wrapper(jlModule){
  }

  void add_methods() const{
    auto& t = module_;

    DEBUG_MSG("Adding wrapper for double HepMC3::delta_phi(const HepMC3::FourVector &, const HepMC3::FourVector &) (" __HERE__ ")");
    // signature to use in the veto list: double HepMC3::delta_phi(const HepMC3::FourVector &, const HepMC3::FourVector &)
    // defined in /home/hurtbadly/.julia/artifacts/7594d64d7c28f9689b484bf4d09af6dbb8b5123c/include/HepMC3/FourVector.h:326:15
    t.method("HepMC3!delta_phi", static_cast<double (*)(const HepMC3::FourVector &, const HepMC3::FourVector &) >(&HepMC3::delta_phi));

    DEBUG_MSG("Adding wrapper for double HepMC3::delta_eta(const HepMC3::FourVector &, const HepMC3::FourVector &) (" __HERE__ ")");
    // signature to use in the veto list: double HepMC3::delta_eta(const HepMC3::FourVector &, const HepMC3::FourVector &)
    // defined in /home/hurtbadly/.julia/artifacts/7594d64d7c28f9689b484bf4d09af6dbb8b5123c/include/HepMC3/FourVector.h:329:15
    t.method("HepMC3!delta_eta", static_cast<double (*)(const HepMC3::FourVector &, const HepMC3::FourVector &) >(&HepMC3::delta_eta));

    DEBUG_MSG("Adding wrapper for double HepMC3::delta_rap(const HepMC3::FourVector &, const HepMC3::FourVector &) (" __HERE__ ")");
    // signature to use in the veto list: double HepMC3::delta_rap(const HepMC3::FourVector &, const HepMC3::FourVector &)
    // defined in /home/hurtbadly/.julia/artifacts/7594d64d7c28f9689b484bf4d09af6dbb8b5123c/include/HepMC3/FourVector.h:332:15
    t.method("HepMC3!delta_rap", static_cast<double (*)(const HepMC3::FourVector &, const HepMC3::FourVector &) >(&HepMC3::delta_rap));

    DEBUG_MSG("Adding wrapper for double HepMC3::delta_r2_eta(const HepMC3::FourVector &, const HepMC3::FourVector &) (" __HERE__ ")");
    // signature to use in the veto list: double HepMC3::delta_r2_eta(const HepMC3::FourVector &, const HepMC3::FourVector &)
    // defined in /home/hurtbadly/.julia/artifacts/7594d64d7c28f9689b484bf4d09af6dbb8b5123c/include/HepMC3/FourVector.h:335:15
    t.method("HepMC3!delta_r2_eta", static_cast<double (*)(const HepMC3::FourVector &, const HepMC3::FourVector &) >(&HepMC3::delta_r2_eta));

    DEBUG_MSG("Adding wrapper for double HepMC3::delta_r_eta(const HepMC3::FourVector &, const HepMC3::FourVector &) (" __HERE__ ")");
    // signature to use in the veto list: double HepMC3::delta_r_eta(const HepMC3::FourVector &, const HepMC3::FourVector &)
    // defined in /home/hurtbadly/.julia/artifacts/7594d64d7c28f9689b484bf4d09af6dbb8b5123c/include/HepMC3/FourVector.h:338:15
    t.method("HepMC3!delta_r_eta", static_cast<double (*)(const HepMC3::FourVector &, const HepMC3::FourVector &) >(&HepMC3::delta_r_eta));

    DEBUG_MSG("Adding wrapper for double HepMC3::delta_r2_rap(const HepMC3::FourVector &, const HepMC3::FourVector &) (" __HERE__ ")");
    // signature to use in the veto list: double HepMC3::delta_r2_rap(const HepMC3::FourVector &, const HepMC3::FourVector &)
    // defined in /home/hurtbadly/.julia/artifacts/7594d64d7c28f9689b484bf4d09af6dbb8b5123c/include/HepMC3/FourVector.h:341:15
    t.method("HepMC3!delta_r2_rap", static_cast<double (*)(const HepMC3::FourVector &, const HepMC3::FourVector &) >(&HepMC3::delta_r2_rap));

    DEBUG_MSG("Adding wrapper for double HepMC3::delta_r_rap(const HepMC3::FourVector &, const HepMC3::FourVector &) (" __HERE__ ")");
    // signature to use in the veto list: double HepMC3::delta_r_rap(const HepMC3::FourVector &, const HepMC3::FourVector &)
    // defined in /home/hurtbadly/.julia/artifacts/7594d64d7c28f9689b484bf4d09af6dbb8b5123c/include/HepMC3/FourVector.h:344:15
    t.method("HepMC3!delta_r_rap", static_cast<double (*)(const HepMC3::FourVector &, const HepMC3::FourVector &) >(&HepMC3::delta_r_rap));
  }
};
std::shared_ptr<Wrapper> newJlGlobal(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlGlobal(module));
}
