// this file was auto-generated by wrapit v1.4.0
#include "Wrapper.h"

#include "jlHepMC3.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<HepMC3::FloatAttribute> : std::false_type { };
  template<> struct DefaultConstructible<HepMC3::FloatAttribute> : std::false_type { };
template<> struct SuperType<HepMC3::FloatAttribute> { typedef HepMC3::Attribute type; };
}

// Class generating the wrapper for type HepMC3::FloatAttribute
// signature to use in the veto file: HepMC3::FloatAttribute
struct JlHepMC3_FloatAttribute: public Wrapper {

  JlHepMC3_FloatAttribute(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type HepMC3::FloatAttribute (" __HERE__ ")");
    // defined in /home/hurtbadly/.julia/artifacts/7594d64d7c28f9689b484bf4d09af6dbb8b5123c/include/HepMC3/Attribute.h:292:7
    jlcxx::TypeWrapper<HepMC3::FloatAttribute>  t = jlModule.add_type<HepMC3::FloatAttribute>("HepMC3!FloatAttribute",
      jlcxx::julia_base_type<HepMC3::Attribute>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<HepMC3::FloatAttribute>>(new jlcxx::TypeWrapper<HepMC3::FloatAttribute>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void HepMC3::FloatAttribute::FloatAttribute(float) (" __HERE__ ")");
    // defined in /home/hurtbadly/.julia/artifacts/7594d64d7c28f9689b484bf4d09af6dbb8b5123c/include/HepMC3/Attribute.h:299:5
    t.constructor<float>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for bool HepMC3::FloatAttribute::from_string(const std::string &) (" __HERE__ ")");
    // signature to use in the veto list: bool HepMC3::FloatAttribute::from_string(const std::string &)
    // defined in /home/hurtbadly/.julia/artifacts/7594d64d7c28f9689b484bf4d09af6dbb8b5123c/include/HepMC3/Attribute.h:302:10
    t.method("from_string", static_cast<bool (HepMC3::FloatAttribute::*)(const std::string &) >(&HepMC3::FloatAttribute::from_string));

    DEBUG_MSG("Adding wrapper for bool HepMC3::FloatAttribute::to_string(std::string &) (" __HERE__ ")");
    // signature to use in the veto list: bool HepMC3::FloatAttribute::to_string(std::string &)
    // defined in /home/hurtbadly/.julia/artifacts/7594d64d7c28f9689b484bf4d09af6dbb8b5123c/include/HepMC3/Attribute.h:309:10
    t.method("to_string", static_cast<bool (HepMC3::FloatAttribute::*)(std::string &)  const>(&HepMC3::FloatAttribute::to_string));

    DEBUG_MSG("Adding wrapper for float HepMC3::FloatAttribute::value() (" __HERE__ ")");
    // signature to use in the veto list: float HepMC3::FloatAttribute::value()
    // defined in /home/hurtbadly/.julia/artifacts/7594d64d7c28f9689b484bf4d09af6dbb8b5123c/include/HepMC3/Attribute.h:318:11
    t.method("value", static_cast<float (HepMC3::FloatAttribute::*)()  const>(&HepMC3::FloatAttribute::value));

    DEBUG_MSG("Adding wrapper for void HepMC3::FloatAttribute::set_value(const float &) (" __HERE__ ")");
    // signature to use in the veto list: void HepMC3::FloatAttribute::set_value(const float &)
    // defined in /home/hurtbadly/.julia/artifacts/7594d64d7c28f9689b484bf4d09af6dbb8b5123c/include/HepMC3/Attribute.h:323:10
    t.method("set_value", static_cast<void (HepMC3::FloatAttribute::*)(const float &) >(&HepMC3::FloatAttribute::set_value));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<HepMC3::FloatAttribute>> type_;
};
std::shared_ptr<Wrapper> newJlHepMC3_FloatAttribute(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlHepMC3_FloatAttribute(module));
}
