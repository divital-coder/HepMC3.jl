// this file was auto-generated by wrapit v1.4.0
#include "Wrapper.h"

#include "jlHepMC3.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<HepMC3::GenPdfInfo> : std::false_type { };
  template<> struct DefaultConstructible<HepMC3::GenPdfInfo> : std::false_type { };
template<> struct SuperType<HepMC3::GenPdfInfo> { typedef HepMC3::Attribute type; };
}

// Class generating the wrapper for type HepMC3::GenPdfInfo
// signature to use in the veto file: HepMC3::GenPdfInfo
struct JlHepMC3_GenPdfInfo: public Wrapper {

  JlHepMC3_GenPdfInfo(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type HepMC3::GenPdfInfo (" __HERE__ ")");
    // defined in /home/hurtbadly/.julia/artifacts/7594d64d7c28f9689b484bf4d09af6dbb8b5123c/include/HepMC3/GenPdfInfo.h:32:7
    jlcxx::TypeWrapper<HepMC3::GenPdfInfo>  t = jlModule.add_type<HepMC3::GenPdfInfo>("HepMC3!GenPdfInfo",
      jlcxx::julia_base_type<HepMC3::Attribute>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<HepMC3::GenPdfInfo>>(new jlcxx::TypeWrapper<HepMC3::GenPdfInfo>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for bool HepMC3::GenPdfInfo::from_string(const std::string &) (" __HERE__ ")");
    // signature to use in the veto list: bool HepMC3::GenPdfInfo::from_string(const std::string &)
    // defined in /home/hurtbadly/.julia/artifacts/7594d64d7c28f9689b484bf4d09af6dbb8b5123c/include/HepMC3/GenPdfInfo.h:49:10
    t.method("from_string", static_cast<bool (HepMC3::GenPdfInfo::*)(const std::string &) >(&HepMC3::GenPdfInfo::from_string));

    DEBUG_MSG("Adding wrapper for bool HepMC3::GenPdfInfo::to_string(std::string &) (" __HERE__ ")");
    // signature to use in the veto list: bool HepMC3::GenPdfInfo::to_string(std::string &)
    // defined in /home/hurtbadly/.julia/artifacts/7594d64d7c28f9689b484bf4d09af6dbb8b5123c/include/HepMC3/GenPdfInfo.h:52:10
    t.method("to_string", static_cast<bool (HepMC3::GenPdfInfo::*)(std::string &)  const>(&HepMC3::GenPdfInfo::to_string));

    DEBUG_MSG("Adding wrapper for void HepMC3::GenPdfInfo::set(const int &, const int &, const double &, const double &, const double &, const double &, const double &, const int &, const int &) (" __HERE__ ")");
    // signature to use in the veto list: void HepMC3::GenPdfInfo::set(const int &, const int &, const double &, const double &, const double &, const double &, const double &, const int &, const int &)
    // defined in /home/hurtbadly/.julia/artifacts/7594d64d7c28f9689b484bf4d09af6dbb8b5123c/include/HepMC3/GenPdfInfo.h:55:10
    t.method("set", static_cast<void (HepMC3::GenPdfInfo::*)(const int &, const int &, const double &, const double &, const double &, const double &, const double &, const int &, const int &) >(&HepMC3::GenPdfInfo::set));
    t.method("set", [](HepMC3::GenPdfInfo& a, const int & arg0, const int & arg1, const double & arg2, const double & arg3, const double & arg4, const double & arg5, const double & arg6)->void { a.set(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("set", [](HepMC3::GenPdfInfo& a, const int & arg0, const int & arg1, const double & arg2, const double & arg3, const double & arg4, const double & arg5, const double & arg6, const int & arg7)->void { a.set(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); });
    t.method("set", [](HepMC3::GenPdfInfo* a, const int & arg0, const int & arg1, const double & arg2, const double & arg3, const double & arg4, const double & arg5, const double & arg6)->void { a->set(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("set", [](HepMC3::GenPdfInfo* a, const int & arg0, const int & arg1, const double & arg2, const double & arg3, const double & arg4, const double & arg5, const double & arg6, const int & arg7)->void { a->set(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); });
    module_.set_override_module(jl_base_module);

    DEBUG_MSG("Adding wrapper for bool HepMC3::GenPdfInfo::operator==(const HepMC3::GenPdfInfo &) (" __HERE__ ")");
    // signature to use in the veto list: bool HepMC3::GenPdfInfo::operator==(const HepMC3::GenPdfInfo &)
    // defined in /home/hurtbadly/.julia/artifacts/7594d64d7c28f9689b484bf4d09af6dbb8b5123c/include/HepMC3/GenPdfInfo.h:59:10
    t.method("==", static_cast<bool (HepMC3::GenPdfInfo::*)(const HepMC3::GenPdfInfo &)  const>(&HepMC3::GenPdfInfo::operator==));

    DEBUG_MSG("Adding wrapper for bool HepMC3::GenPdfInfo::operator!=(const HepMC3::GenPdfInfo &) (" __HERE__ ")");
    // signature to use in the veto list: bool HepMC3::GenPdfInfo::operator!=(const HepMC3::GenPdfInfo &)
    // defined in /home/hurtbadly/.julia/artifacts/7594d64d7c28f9689b484bf4d09af6dbb8b5123c/include/HepMC3/GenPdfInfo.h:60:10
    t.method("!=", static_cast<bool (HepMC3::GenPdfInfo::*)(const HepMC3::GenPdfInfo &)  const>(&HepMC3::GenPdfInfo::operator!=));

    module_.unset_override_module();

    DEBUG_MSG("Adding wrapper for bool HepMC3::GenPdfInfo::is_valid() (" __HERE__ ")");
    // signature to use in the veto list: bool HepMC3::GenPdfInfo::is_valid()
    // defined in /home/hurtbadly/.julia/artifacts/7594d64d7c28f9689b484bf4d09af6dbb8b5123c/include/HepMC3/GenPdfInfo.h:61:10
    t.method("is_valid", static_cast<bool (HepMC3::GenPdfInfo::*)()  const>(&HepMC3::GenPdfInfo::is_valid));

    DEBUG_MSG("Adding scale methods  to provide read access to the field scale (" __HERE__ ")");
    // defined in /home/hurtbadly/.julia/artifacts/7594d64d7c28f9689b484bf4d09af6dbb8b5123c/include/HepMC3/GenPdfInfo.h:40:12
    // signature to use in the veto list: HepMC3::GenPdfInfo::scale
    t.method("scale", [](const HepMC3::GenPdfInfo& a) -> double { return a.scale; });
    t.method("scale", [](HepMC3::GenPdfInfo& a) -> double { return a.scale; });
    t.method("scale", [](const HepMC3::GenPdfInfo* a) -> double { return a->scale; });
    t.method("scale", [](HepMC3::GenPdfInfo* a) -> double { return a->scale; });
    // defined in /home/hurtbadly/.julia/artifacts/7594d64d7c28f9689b484bf4d09af6dbb8b5123c/include/HepMC3/GenPdfInfo.h:40:12
    // signature to use in the veto list: HepMC3::GenPdfInfo::scale
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding scale! methods to provide write access to the field scale (" __HERE__ ")");
    t.method("scale!", [](HepMC3::GenPdfInfo& a, double val) -> double { return a.scale = val; });

    DEBUG_MSG("Adding scale! methods to provide write access to the field scale (" __HERE__ ")");
    t.method("scale!", [](HepMC3::GenPdfInfo* a, double val) -> double { return a->scale = val; });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<HepMC3::GenPdfInfo>> type_;
};
std::shared_ptr<Wrapper> newJlHepMC3_GenPdfInfo(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlHepMC3_GenPdfInfo(module));
}
